# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Second_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from pytube import YouTube
import os
import requests
import platform
from PIL import Image
import io
import subprocess


class Ui_SecondWindow(object):
    def  __init__(self, urlvideo):
        self.urlvideo = urlvideo
        self.video = YouTube(self.urlvideo)
        self.load_img()
        
    
    def load_img(self):
        # GET USER
        user = os.getlogin()
        
        # GET SYSTEM OPERATION
        system = platform.system()
        
        if system == "Linux" or "Mac": 
            image = self.video.thumbnail_url
            response = requests.get(image)
            image_byte = io.BytesIO(response.content)
            img = Image.open(image_byte)
            img.save(f"/home/{user}/Youtube_Download/images/img_video.png")
                          
            size = (180, 180)
            filename = f"/home/{user}/Youtube_Download/images/img_video.png"
            outfile = filename
            try:
                im = Image.open(filename)
                im.thumbnail(size, Image.Resampling.LANCZOS)
                im.save(outfile, "PNG")
            except IOError:print("cannot create thumbnail for '%s'" % filename)
            
        else:
            # Window
            image = self.video.thumbnail_url
            response = requests.get(image)
            image_byte = io.BytesIO(response.content)
            img = Image.open(image_byte)
            img.save(f"C:\\Users\\{user}\\Youtube_Download\\images\\img_video.png")
                          
            size = (180, 180)
            filename = f"C:\\Users\\{user}\\Youtube_Download\\images\\img_video.png"
            outfile = filename
            try:
                im = Image.open(filename)
                im.thumbnail(size, Image.Resampling.LANCZOS)
                im.save(outfile, "PNG")
            except IOError:print("cannot create thumbnail for '%s'" % filename)
    
    
    def setupUi(self, SecondWindow):
        SecondWindow.setObjectName("SecondWindow")
        SecondWindow.resize(576, 379)
        SecondWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        SecondWindow.setStyleSheet("background-color: rgb(45, 55, 66);")
        self.centralwidget = QtWidgets.QWidget(SecondWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.foto = QtWidgets.QLineEdit(self.centralwidget)
        self.foto.setGeometry(QtCore.QRect(20, 30, 191, 181))
        self.foto.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.foto.setReadOnly(True)
        self.foto.setObjectName("foto")
        
        
        # CHECK PLATFORM SYSTEM
        system = platform.system()
        
        # Linux or Mac
        if system == "Linux" or "Mac":
            # SET IMG VIDEO
            self.foto.setStyleSheet("QLineEdit"
                            "{"
                            f"background-image:url(/home/{os.getlogin()}/Youtube_Download/images/img_video.png);"
                            "background-repeat:no-repeat;"
                            "background-position:center;"
                            "}")
        else:
            # Windows
            # SET IMG VIDEO
            self.foto.setStyleSheet("QLineEdit"
                            "{"
                            f"background-image:url(C:\\Users\\{os.getlogin()}\\Youtube_Download\\images\\img_video.png);"
                            "background-repeat:no-repeat;"
                            "background-position:center;"
                            "}")
            
            
            
        self.scrollAreaDescription = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollAreaDescription.setGeometry(QtCore.QRect(290, 30, 241, 211))
        self.scrollAreaDescription.setBaseSize(QtCore.QSize(0, 0))
        self.scrollAreaDescription.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.scrollAreaDescription.setAutoFillBackground(False)
        self.scrollAreaDescription.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scrollAreaDescription.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollAreaDescription.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.scrollAreaDescription.setWidgetResizable(True)
        self.scrollAreaDescription.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.scrollAreaDescription.setObjectName("scrollAreaDescription")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 216, 207))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.description = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.description.setStyleSheet("font: 57 8pt \"Bedstead\";color: rgb(230, 220, 190);")
        
        # Agregando descripcion
        self.description.setText(f"{self.video.description}")
        
        
        self.description.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.description.setWordWrap(True)
        self.description.setObjectName("description")
        self.horizontalLayout.addWidget(self.description)
        self.scrollAreaDescription.setWidget(self.scrollAreaWidgetContents)
        self.lowquality = QtWidgets.QCheckBox(self.centralwidget)
        self.lowquality.setGeometry(QtCore.QRect(20, 280, 111, 22))
        self.lowquality.setStyleSheet("color: rgb(230, 220, 190);font: 57 10pt \"Bedstead\";")
        self.lowquality.setObjectName("lowquality")
        self.highquality = QtWidgets.QCheckBox(self.centralwidget)
        self.highquality.setGeometry(QtCore.QRect(20, 310, 121, 22))
        self.highquality.setStyleSheet("color: rgb(230, 220, 190);font: 57 10pt \"Bedstead\";")
        self.highquality.setObjectName("highquality")
        self.onlyaudio = QtWidgets.QCheckBox(self.centralwidget)
        self.onlyaudio.setGeometry(QtCore.QRect(20, 340, 111, 22))
        self.onlyaudio.setStyleSheet("color: rgb(230, 220, 190);font: 57 10pt \"Bedstead\";")
        self.onlyaudio.setObjectName("onlyaudio")
        self.Download = QtWidgets.QPushButton(self.centralwidget)
        self.Download.setGeometry(QtCore.QRect(420, 280, 111, 31))
        self.Download.setStyleSheet("color: rgb(230, 220, 190);font: 57 10pt \"Bedstead\";")
        self.Download.setObjectName("Download")
        
        # Download video and audio
        self.Download.clicked.connect(self.checkin)
        
        
        self.NewDownload = QtWidgets.QPushButton(self.centralwidget)
        self.NewDownload.setGeometry(QtCore.QRect(290, 280, 111, 31))
        self.NewDownload.setStyleSheet("color: rgb(230, 220, 190);font: 57 10pt \"Bedstead\";")
        self.NewDownload.setObjectName("NewDownload")
        
        
        # CLOSE WINDOW
        self.NewDownload.clicked.connect(lambda:SecondWindow.close())
        self.NewDownload.clicked.connect(self.NewUrl)
        
        
        self.scrollArea_2Title = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_2Title.setGeometry(QtCore.QRect(20, 220, 191, 51))
        self.scrollArea_2Title.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea_2Title.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.scrollArea_2Title.setWidgetResizable(True)
        self.scrollArea_2Title.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.scrollArea_2Title.setObjectName("scrollArea_2Title")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 187, 47))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout.setObjectName("verticalLayout")
        self.title = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.title.setStyleSheet("font: 57 10pt \"Bedstead\";\n"
"color: rgb(230, 220, 190);")
        self.title.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.title.setObjectName("title")
        self.verticalLayout.addWidget(self.title)
        self.scrollArea_2Title.setWidget(self.scrollAreaWidgetContents_2)
        SecondWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(SecondWindow)
        QtCore.QMetaObject.connectSlotsByName(SecondWindow)

    
    def NewUrl(self):
        pwd = os.getcwd()
        pwd = pwd.replace(" ", "\ ")
        subprocess.call(f"python {pwd}/UrlWindow.py", shell=True)
    
    # Check to download
    def checkin(self):
        highquality = self.highquality.isChecked()
        lowquality = self.lowquality.isChecked()
        audio = self.onlyaudio.isChecked()
        system = platform.system()
        user = os.getlogin()
        if highquality and lowquality and audio:
            if system == "Linux" or "Mac":
                self.video.streams.get_highest_resolution().download(f"/home/{user}/Youtube_Download/High")
                self.video.streams.get_lowest_resolution().download(f"/home/{user}/Youtube_Download/Low")
                self.video.streams.get_audio_only().download(f"/home/{user}/Youtube_Download/Audio")
            else:
                self.video.streams.get_highest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\High")
                self.video.streams.get_lowest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\Low")
                self.video.streams.get_audio_only().download(f"C:\\Users\\{user}\\Youtube_Download\\Audio")
                
        # HIGH
        elif highquality and lowquality and audio == False:
            if system == "Linux" or "Mac":
                self.video.streams.get_highest_resolution().download(f"/home/{user}/Youtube_Download/High")
                self.video.streams.get_lowest_resolution().download(f"/home/{user}/Youtube_Download/Low")
            else:
                self.video.streams.get_highest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\High")
                self.video.streams.get_lowest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\Low")
                
        elif highquality and lowquality == False and audio:
            if system == "Linux" or "Mac":
                self.video.streams.get_highest_resolution().download(f"/home/{user}/Youtube_Download/High")
                self.video.streams.get_audio_only().download(f"/home/{user}/Youtube_Download/Audio")
            else:
                self.video.streams.get_highest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\High")
                self.video.streams.get_audio_only().download(f"C:\\Users\\{user}\\Youtube_Download\\Audio")
                
        elif highquality and lowquality == False and audio ==False:
            if system == "Linux" or "Mac":
                self.video.streams.get_highest_resolution().download(f"/home/{user}/Youtube_Download/High")
            else:
                self.video.streams.get_highest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\High")
                
        # LOW
        if lowquality and highquality and audio == False:
            if system == "Linux" or "Mac":
                self.video.streams.get_highest_resolution().download(f"/home/{user}/Youtube_Download/High")
                self.video.streams.get_lowest_resolution().download(f"/home/{user}/Youtube_Download/Low")
            else:
                self.video.streams.get_highest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\High")
                self.video.streams.get_lowest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\Low")
                
        elif lowquality and highquality == False and audio:
            if system == "Linux" or "Mac":
                self.video.streams.get_lowest_resolution().download(f"/home/{user}/Youtube_Download/Low")
                self.video.streams.get_audio_only().download(f"/home/{user}/Youtube_Download/Audio")
            else:
                self.video.streams.get_lowest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\Low")
                self.video.streams.get_audio_only().download(f"C:\\Users\\{user}\\Youtube_Download\\Audio")   
        
        elif lowquality and highquality == False and audio == False:
            if system == "Linux" or "Mac":
                self.video.streams.get_lowest_resolution().download(f"/home/{user}/Youtube_Download/Low")
            else:
                self.video.streams.get_lowest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\Low")
                
        # Audio
        elif audio and lowquality and highquality == False:
            if system == "Linux" or "Mac":
                self.video.streams.get_lowest_resolution().download(f"/home/{user}/Youtube_Download/Low")
                self.video.streams.get_audio_only().download(f"/home/{user}/Youtube_Download/Audio")
            else:
                self.video.streams.get_lowest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\Low")
                self.video.streams.get_audio_only().download(f"C:\\Users\\{user}\\Youtube_Download\\Audio")
        
        elif audio and lowquality == False and highquality:
            if system == "Linux" or "Mac":
                self.video.streams.get_highest_resolution().download(f"/home/{user}/Youtube_Download/High")
                self.video.streams.get_audio_only().download(f"/home/{user}/Youtube_Download/Audio")
            else:
                self.video.streams.get_highest_resolution().download(f"C:\\Users\\{user}\\Youtube_Download\\High")
                self.video.streams.get_audio_only().download(f"C:\\Users\\{user}\\Youtube_Download\\Audio")
                
        elif audio and lowquality == False and highquality == False:
            if system == "Linux" or "Mac":
                self.video.streams.get_audio_only().download(f"/home/{user}/Youtube_Download/Audio")
            else:
                self.video.streams.get_audio_only().download(f"C:\\Users\\{user}\\Youtube_Download\\Audio")
            
            
    def retranslateUi(self, SecondWindow):
        _translate = QtCore.QCoreApplication.translate
        SecondWindow.setWindowTitle(_translate("SecondWindow", "MainWindow"))
        self.lowquality.setText(_translate("SecondWindow", "Low quality"))
        self.highquality.setText(_translate("SecondWindow", "High quality"))
        self.onlyaudio.setText(_translate("SecondWindow", "Only audio"))
        self.Download.setText(_translate("SecondWindow", "Donwload"))
        self.NewDownload.setText(_translate("SecondWindow", "New Download"))
        
        # Title video
        self.title.setText(_translate("SecondWindow", f"Title:{self.video.title}"))
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    SecondWindow = QtWidgets.QMainWindow()
    ui = Ui_SecondWindow()
    ui.setupUi(SecondWindow)
    SecondWindow.show()
    sys.exit(app.exec_())
